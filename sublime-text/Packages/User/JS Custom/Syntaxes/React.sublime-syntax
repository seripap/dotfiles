%YAML 1.2
---
version: 2
scope: source.js.react
variables:
  hex_digit: '[\h_]'
  jsx_identifier_part: (?:{{identifier_part}}|-)
  identifier_start: (?:[_$\p{L}\p{Nl}]|{{identifier_escape}})
  oct_digit: '[0-7_]'
  property_name: >-
    (?x:
      {{identifier_name}}
      | [0-9]+
      | '(?:[^\\']|\\.)*'
      | "(?:[^\\"]|\\.)*"
      | \[ .* \]
    )
  method_lookahead: |-
    (?x)(?=
      (?: get|set|async ){{identifier_break}}(?!\s*:)
      | \*
      | {{property_name}} \s* (?:\(|<)
    )
  modifier: (?:(?:static|accessor){{identifier_break}})
  arrow_func_lookahead: |-
    (?x)(?:
      \s*(async\s*)?
      (?:
        {{non_reserved_identifier}}
        |\( (?: [^()]|\([^()]*\) )* \)
      )
      (?:
        \s*:
        \s*{{non_reserved_identifier}}
      )?
      \s*=>
    )
  function_assignment_lookahead: |-
    (?x:(?=
      \s* = \s*
      {{either_func_lookahead}}
    ))
  either_func_lookahead: (?:{{func_lookahead}}|{{arrow_func_lookahead}})
  dec_exponent: '[Ee](?:[-+]|(?![-+])){{dec_digit}}*'
  reserved_word: |-
    (?x:
      break|case|catch|class|const|continue|debugger|default|delete|do|else|
      export|extends|finally|for|function|if|import|in|instanceof|new|return|
      super|switch|this|throw|try|typeof|var|void|while|with|yield|
      enum|
      null|true|false
    ){{identifier_break}}
  dot_accessor: (?:\??\.)
  bin_digit: '[01_]'
  function_call_lookahead: >-
    (?x:(?=
      {{identifier_name}}
      \s*
      (?:
        <
        .*
        >
        \s*
      )?
      (?:{{dot_accessor}})?
      \(
    ))
  dec_integer: (?:0|[1-9]{{dec_digit}}*)
  dollar_only_identifier: (?:\${{identifier_break}})
  identifier_part: (?:[_$\p{L}\p{Nl}\p{Mn}\p{Mc}\p{Nd}\p{Pc}\x{200C}\x{200D}]|{{identifier_escape}})
  identifier_name: (?:{{identifier_start}}{{identifier_part}}*{{identifier_break}})
  non_reserved_identifier: (?:(?!{{reserved_word}}){{identifier_name}})
  left_expression_end_lookahead: (?!\s*[.\[\(])
  nothing: (?:(?:\s|{{block_comment}})*)
  dec_digit: '[0-9_]'
  block_comment: (?:/\*{{block_comment_contents}}\*/)
  identifier_break: (?!{{identifier_part}})
  constant_identifier: (?:[[:upper:]]{{identifier_part}}*{{identifier_break}})
  func_lookahead: |-
    (?x:
      (?:async{{identifier_break}}{{nothing}})?
      function{{identifier_break}}
    )
  shebang_lang: \b(?:node|js)\b
  identifier_escape: (?:\\u(?:\h{4}|\{\h+\}))
  block_comment_contents: (?:(?:[^*]|\*(?!/))*)
  jsx_identifier: '{{identifier_start}}{{jsx_identifier_part}}*{{jsx_identifier_break}}'
  binding_pattern_lookahead: (?:{{identifier_name}}|\[|\{)
  class_element_name: |-
    (?x:
      \+?
      (?:
        \*?
        {{property_name}}
        | \#{{non_reserved_identifier}}
      )
    )
  possible_arrow_function_begin: (?:\(|{{identifier_start}}|<)
  line_ending_ahead: (?={{nothing}}(?:/\*{{block_comment_contents}}|//.*)?$)
  jsdoc_block_tag: \@[^\n\t\f\v *@]+
  dollar_identifier: (?:(\$){{identifier_part}}*{{identifier_break}})
  jsx_identifier_break: (?!{{jsx_identifier_part}})
first_line_match: |-
  (?xi:
    ^ \s* // .*? -\*- .*? \bjsx\b .*? -\*-  # editorconfig
  )
file_extensions:
  - js
  - jsx
contexts:
  block-scope:
    - include: block
    - include: else-pop

  support-property-ecma-reflect:
    - match: (?:apply|construct|defineProperty|deleteProperty|get|getOwnPropertyDescriptor|getPrototypeOf|has|isExtensible|ownKeys|preventExtensions|set|setPrototypeOf){{identifier_break}}
      scope: support.function.builtin.js
      pop: 1

  literal-string-template:
    - match: \`
      scope: punctuation.definition.string.begin.js
      set: literal-string-template-content

  method-name:
    - match: '{{dollar_identifier}}'
      scope: meta.mapping.key.dollar.js entity.name.function.js
      captures:
        1: punctuation.dollar.js
      pop: 1
    - match: '{{identifier_name}}'
      scope: entity.name.function.js
      pop: 1
    - match: (#){{identifier_name}}
      scope: entity.name.function.js
      captures:
        1: punctuation.definition.js
      pop: 1
    - match: "'"
      scope: punctuation.definition.string.begin.js
      set:
        - meta_include_prototype: false
        - meta_scope: meta.string.js string.quoted.single.js
        - meta_content_scope: entity.name.function.js
        - match: \'
          scope: punctuation.definition.string.end.js
          pop: 1
        - match: \n
          scope: invalid.illegal.newline.js
          pop: 1
        - include: string-content
    - match: '"'
      scope: punctuation.definition.string.begin.js
      set:
        - meta_include_prototype: false
        - meta_scope: meta.string.js string.quoted.double.js
        - meta_content_scope: entity.name.function.js
        - match: \"
          scope: punctuation.definition.string.end.js
          pop: 1
        - match: \n
          scope: invalid.illegal.newline.js
          pop: 1
        - include: string-content

    - include: computed-property-name

    - include: else-pop

  flow-type-annotation-optional:
    - match: \?(?=:)
      scope: storage.modifier.optional.js
    - include: flow-type-annotation

  flow-type-object:
    - match: \{\|
      scope: punctuation.section.block.begin.js
      set:
        - meta_scope: meta.type.object.exact.js
        - match: \|\}
          scope: punctuation.section.block.end.js
          pop: true
        - include: flow-type-object-contents

    - match: \{
      scope: punctuation.section.block.begin.js
      set:
        - meta_scope: meta.type.object.js
        - match: \}
          scope: punctuation.section.block.end.js
          pop: true
        - include: flow-type-object-contents

  variable-binding-spread:
    - match: \.\.\.
      scope: keyword.operator.spread.js
      push: variable-binding-pattern

  support-property-node-process:
    - match: (?:arch|argv|argv0|channel|config|connected|debugPort|env|execArgv|execPath|exitCode|mainModule|noDeprecation|pid|platform|ppid|release|stderr|stdin|stdout|throwDeprecation|title|traceDeprecation|version|versions){{identifier_break}}
      scope: support.constant.node.js
      pop: 1
    - match: (?:abort|chdir|cpuUsage|cwd|disconnect|dlopen|emitWarning|exit|getegid|geteuid|getgit|getgroups|getuid|hasUncaughtExceptionCaptureCallback|hrtime|initGroups|kill|memoryUsage|nextTick|send|setegid|seteuid|setgid|setgroups|setuid|hasUncaughtExceptionCaptureCallback|umask|uptime){{identifier_break}}
      scope: support.function.node.js
      pop: 1

  variable-binding-pattern:
    - match: ''
      set:
        -   - include: flow-type-annotation
        -   - include: variable-binding-name
            - include: variable-binding-array-destructuring
            - include: variable-binding-object-destructuring
            - include: else-pop

  jsx-attribute-value:
    - include: jsx-tag
    - include: jsx-interpolation

    - match: "'"
      scope: punctuation.definition.string.begin.js
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.single.js
        - match: \'
          scope: punctuation.definition.string.end.js
          pop: 1
        - include: jsx-html-escapes
    - match: '"'
      scope: punctuation.definition.string.begin.js
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.js
        - match: \"
          scope: punctuation.definition.string.end.js
          pop: 1
        - include: jsx-html-escapes

    - include: else-pop

  jsx-tag-name:
    - meta_include_prototype: false
    - match: ''
      set:
        - jsx-tag-name-meta
        - jsx-tag-name-end
        - jsx-tag-name-component-possibly-native

  call-function-name:
    - match: '{{dollar_only_identifier}}'
      scope: variable.function.js variable.other.dollar.only.js punctuation.dollar.js
      pop: 1
    - match: '{{identifier_name}}'
      scope: variable.function.js
      pop: 1
    - include: else-pop

  variable-binding-object-key:
    - match: '{{identifier_name}}(?=\s*:)'
      pop: 1
    - include: literal-string
    - include: computed-property-name
    - include: variable-binding-name
    - include: else-pop

  support-variable-node:
    - match: global{{identifier_break}}
      scope: support.type.object.node.js
      pop: 1

    - match: Buffer{{identifier_break}}
      scope: support.class.node.js
      pop: 1

    - match: process{{identifier_break}}
      scope: support.constant.node.js
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-node-process
            - include: object-property
            - include: else-pop
        - include: else-pop

    # Module-level variables
    - match: (?:__dirname|__filename|exports){{identifier_break}}
      scope: support.constant.node.js
      pop: 1
    - match: module{{identifier_break}}
      scope: support.constant.node.js
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-node-module
            - include: object-property
            - include: else-pop
        - include: else-pop
    - match: require{{identifier_break}}
      scope: support.function.node.js
      pop: 1

  with-meta:
    - meta_include_prototype: false
    - meta_scope: meta.with.js
    - include: immediately-pop

  support-property-ecma-object:
    - match: (?:assign|create|defineProperties|defineProperty|entries|freeze|fromEntries|getOwnPropertyDescriptors?|getOwnPropertyNames|getOwnPropertySymbols|getPrototypeOf|is|isExtensible|isFrozen|isSealed|keys|preventExtensions|seal|setPrototypeOf|values){{identifier_break}}
      scope: support.function.builtin.js
      pop: 1

  function-parameter-binding-list:
    - match: ','
      scope: punctuation.separator.parameter.function.js
    - include: function-parameter-binding-spread
    - match: (?={{binding_pattern_lookahead}})
      push: function-parameter
    - include: else-pop

  class-field-check:
    - match: (?=[(<])
      fail: class-field
    - include: else-pop

  immediately-pop:
    - match: ''
      pop: 1

  catch-binding-end:
    - meta_scope: meta.group.js
    - match: \)
      scope: punctuation.section.group.end.js
      pop: 1

  line-comments:
    - match: /{4,}
      scope: punctuation.definition.comment.js
      push: line-comment-other-body
    - match: /{3}
      scope: punctuation.definition.comment.js
      push: line-comment-triple-slash-body
    - match: /{2}
      scope: punctuation.definition.comment.js
      push: line-comment-double-slash-body

  comma-separator:
    - match: ','
      scope: punctuation.separator.comma.js

  object-property-name:
    - include: computed-property-name
    - include: literal-string
    - include: literal-number

    - match: '{{identifier_name}}'
      pop: 1

    - include: else-pop

  support-property-ecma-bigint:
    - match: (?:asUintN|asIntN){{identifier_break}}
      scope: support.function.builtin.js
      pop: 1

  conditional-meta:
    - meta_include_prototype: false
    - meta_scope: meta.conditional.js
    - include: immediately-pop

  main:
    - meta_include_prototype: false # don't match comments before shebang
    - match: ''
      push: [script, shebang]

  function-parameter:
    - match: ''
      set:
        - initializer
        - function-parameter-binding-pattern

  flow-type-object-contents:
    - include: comma-separator
    - match: ;
      scope: punctuation.separator.semicolon.js
    - match: '{{method_lookahead}}'
      push: method-declaration
    - match: \+
      scope: storage.modifier.variance.js
    - match: '{{non_reserved_identifier}}'
      scope: meta.object-literal.key.js
      push: flow-type-object-value
    - match: \[
      scope: punctuation.section.brackets.begin.js
      push:
        - flow-type-object-value
        - flow-type-object-indexer-type
        - flow-type-object-indexer-label

  finally-meta:
    - meta_include_prototype: false
    - meta_scope: meta.finally.js
    - include: immediately-pop

  flow-type-class:
    - match: '{{non_reserved_identifier}}'
      scope: variable.other.class.js
      pop: true

  flow-type-generic-parameters:
    - match: <
      scope: punctuation.definition.generic.begin.js
      set:
        - meta_scope: meta.generic.declaration.js
        - match: '>'
          scope: punctuation.definition.generic.end.js
          pop: true
        - include: comma-separator
        - match: \+
          scope: storage.modifier.variance.js
        - match: '{{non_reserved_identifier}}'
          scope: variable.parameter.type.js
          push:
            -   - match: '='
                  scope: keyword.operator.assignment.js
                  set: flow-type
                - include: else-pop
            - flow-type-annotation
    - include: else-pop

  for-condition:
    - match: \(
      scope: punctuation.section.group.begin.js
      set:
        - for-condition-end
        - for-condition-contents
    - include: else-pop

  function-meta:
    - meta_include_prototype: false
    - meta_scope: meta.function.js
    - include: immediately-pop

  support-property-ecma-proxy:
    - match: revocable{{identifier_break}}
      scope: support.function.builtin.js
      pop: 1

  expect-case-colon:
    - match: ':'
      scope: punctuation.separator.js
      pop: 1
    - include: else-pop

  function-parameter-binding-object-destructuring:
    - match: \{
      scope: punctuation.section.mapping.begin.js
      set:
        - meta_scope: meta.binding.destructuring.mapping.js
        - match: ','
          scope: punctuation.separator.parameter.function.js
        - match: \}
          scope: punctuation.section.mapping.end.js
          pop: 1
        - include: function-parameter-binding-spread
        - match: (?={{identifier_start}}|\[|'|")
          push:
            - initializer
            - function-parameter-binding-object-alias
            - object-literal-meta-key
            - function-parameter-binding-object-key

  import-meta:
    - meta_include_prototype: false
    - meta_scope: meta.import.js
    - include: immediately-pop

  flow-jsx-tag-check-name:
    - match: (?=(?:(?:{{jsx_identifier_part}})|\.):)
      fail: arrow-function
    - include: else-pop

  import-list:
    - match: ','
      scope: punctuation.separator.comma.js
      push:
        - import-export-alias
        - import-item
    - include: else-pop

  prefixed-object-literal-method:
    - match: (?:get|set){{identifier_break}}
      scope: storage.type.accessor.js
      set:
        - meta_scope: meta.function.js
        - match: (?={{class_element_name}})
          set: method-declaration
        - match: (?=\S)
          fail: prefixed-object-literal-method
    - match: (?:async){{identifier_break}}
      scope: keyword.declaration.async.js
      set:
        - meta_scope: meta.function.js
        - match: (?=\*|{{class_element_name}})
          set: method-declaration
        - match: (?=\S)
          fail: prefixed-object-literal-method

  flow-type:
    - match: ''
      set:
        - flow-type-end
        - flow-type-begin

  variable-binding-object-alias:
    - match: ':'
      scope: punctuation.separator.key-value.js
      set: variable-binding-pattern
    - include: else-pop

  variable-binding-list-top:
    - match: ','
      scope: punctuation.separator.comma.js
      push: variable-binding-top
    - include: else-pop

  flow-type-object-value:
    - match: (\?)?(:)
      captures:
        1: storage.modifier.optional.js
        2: punctuation.separator.key-value.js
      set: flow-type
    - include: else-pop

  inherited-class-expression-end:
    - include: flow-type-generic-arguments

    - match: '{{dot_accessor}}'
      scope: punctuation.accessor.js
      push:
        - include: inherited-class-name
        - include: object-property

    - include: left-expression-end

  import-string-or-items:
    - include: literal-string
    - match: (?=\S)
      set:
        - import-export-from
        - import-list
        - import-export-alias
        - import-item

  flow-type-operators:
    - match: \|(?!\})
      scope: keyword.operator.type.union.js
      push: flow-type-begin
    - match: \&
      scope: keyword.operator.type.intersection.js
      push: flow-type-begin
    - match: =>
      scope: keyword.declaration.function.arrow.js
      push: flow-type-begin
    - match: \?
      scope: storage.modifier.maybe.js
      push: flow-type-begin
    - match: \.
      scope: punctuation.separator.accessor.js
      push: flow-type-begin

    - match: \[\]
      scope: storage.modifier.array.js
    - match: '%checks{{identifier_break}}'
      scope: storage.modifier.checks.js

  variable-binding-list:
    - include: comma-separator
    - match: (?={{binding_pattern_lookahead}})
      push:
        - initializer
        - variable-binding-pattern
    - include: else-pop

  switch-meta:
    - meta_include_prototype: false
    - meta_scope: meta.switch.js
    - include: immediately-pop

  jsdoc-comment-body:
    - meta_include_prototype: false
    - meta_scope: comment.block.documentation.js
    - include: block-comment-end
    # JSDoc "block" tags (i.e. @param) are only accepted at the beginning of the documentation
    # line so directly after the '/**' or after the '*' marker on the next lines.
    - match: ^\s*(\*)(?!/)
      captures:
        1: punctuation.definition.comment.js
      push: jsdoc-block-tag

  inherited-class-name:
    - match: '{{non_reserved_identifier}}{{left_expression_end_lookahead}}'
      scope: entity.other.inherited-class.js
      pop: 1

  decorator-expression-continuation:
    - match: (?=[.`(])
      pop: 1
    - match: (?=\S)
      fail: decorator-expression-continuation

  literal-number:
    # floats
    - match: |-
        (?x:
          # 1., 1.1, 1.1e1, 1.1e-1, 1.e1, 1.e-1 | 1e1, 1e-1
          {{dec_integer}} (?: (\.) {{dec_digit}}* (?:{{dec_exponent}})? | {{dec_exponent}} )
          # .1, .1e1, .1e-1
          | (\.) {{dec_digit}}+ (?:{{dec_exponent}})?
        ){{identifier_break}}
      scope: meta.number.float.decimal.js constant.numeric.value.js
      captures:
        1: punctuation.separator.decimal.js
        2: punctuation.separator.decimal.js
      pop: 1

    # integers
    - match: (0)({{dec_digit}}+){{identifier_break}}
      scope: meta.number.integer.octal.js
      captures:
        1: constant.numeric.base.js invalid.deprecated.numeric.octal.js
        2: constant.numeric.value.js invalid.deprecated.numeric.octal.js
      pop: 1

    - match: (0[Xx])({{hex_digit}}*)(n)?{{identifier_break}}
      scope: meta.number.integer.hexadecimal.js
      captures:
        1: constant.numeric.base.js
        2: constant.numeric.value.js
        3: constant.numeric.suffix.js
      pop: 1

    - match: (0[Oo])({{oct_digit}}*)(n)?{{identifier_break}}
      scope: meta.number.integer.octal.js
      captures:
        1: constant.numeric.base.js
        2: constant.numeric.value.js
        3: constant.numeric.suffix.js
      pop: 1

    - match: (0[Bb])({{bin_digit}}*)(n)?{{identifier_break}}
      scope: meta.number.integer.binary.js
      captures:
        1: constant.numeric.base.js
        2: constant.numeric.value.js
        3: constant.numeric.suffix.js
      pop: 1

    - match: ({{dec_integer}})(n|(?!\.)){{identifier_break}}
      scope: meta.number.integer.decimal.js
      captures:
        1: constant.numeric.value.js
        2: constant.numeric.suffix.js
      pop: 1

    # illegal numbers
    - match: 0[Xx]{{identifier_part}}+
      scope: invalid.illegal.numeric.hexadecimal.js
      pop: 1

    - match: 0[Bb]{{identifier_part}}+
      scope: invalid.illegal.numeric.binary.js
      pop: 1

    - match: 0{{identifier_part}}+
      scope: invalid.illegal.numeric.octal.js
      pop: 1

    - match: '[1-9]{{identifier_part}}+(?:\.{{identifier_part}}*)?'
      scope: invalid.illegal.numeric.decimal.js
      pop: 1

  import-check-branch:
    - match: (?=[.(]) # Recovery for import expressions
      fail: import-statement
    - include: else-pop

  flow-type-export-type:
    - match: type{{identifier_break}}(?=\s*\{)
      scope: keyword.declaration.js
      set: export-item
    - include: flow-type-alias

  constructor-meta:
    - meta_include_prototype: false
    - meta_scope: meta.function-call.constructor.js
    - include: immediately-pop

  support-property-ecma-date:
    - match: (?:now|parse|UTC){{identifier_break}}
      scope: support.function.builtin.js
      pop: 1

  flow-type-list:
    - include: comma-separator
    - match: (?=\S)
      push: flow-type

  label:
    - match: ({{identifier_name}})\s*(:)
      captures:
        1: entity.name.label.js
        2: punctuation.separator.js

  flow-type-module-name:
    - include: literal-string
    - match: '{{non_reserved_identifier}}'
      scope: entity.name.module.js
      pop: true
    - include: else-pop

  jsx-expect-tag-end:
    - meta_content_scope: meta.tag.js
    - match: '>'
      scope: meta.tag.js punctuation.definition.tag.end.js
      pop: 1
    - include: else-pop

  constructor-body-expect-class-begin:
    - match: (?={{non_reserved_identifier}}\s*\()
      set:
        - include: support
        - match: '{{dollar_only_identifier}}'
          scope: variable.type.dollar.only.js punctuation.dollar.js
          pop: 1
        - match: '{{dollar_identifier}}'
          scope: variable.type.dollar.js
          captures:
            1: punctuation.dollar.js
          pop: 1
        - match: '{{identifier_name}}'
          scope: variable.type.js
          pop: 1
        - include: else-pop

    - include: expression-begin

  flow-type-alias:
    - match: (?=type{{identifier_break}})
      set:
        -   - match: (?={{non_reserved_identifier}})
              set:
                -   - meta_scope: meta.declaration.type.js
                    - match: ''
                      pop: true
                - flow-type-alias-initializer
                - flow-type-generic-parameters
                -   - match: '{{non_reserved_identifier}}'
                      scope: entity.name.type.js
                      pop: true
                -   - include: else-pop

            - match: (?=\S)
              set: [expression-statement, expression-end]
        -   - match: type{{identifier_break}}(?=\s*(?:$|{{non_reserved_identifier}}))
              scope: keyword.declaration.js
              set:
                - meta_scope: meta.declaration.type.js
                - include: else-pop
            - include: expression-begin

  flow-type-module-meta:
    - meta_scope: meta.module.js
    - include: immediately-pop

  arrow-function-expect-body:
    - include: function-block
    - match: (?=\S)
      set:
        - block-meta
        - expression-no-comma

  line-comment-end:
    - match: (//+)?\n
      captures:
        1: punctuation.definition.comment.js
      pop: 1

  import-item:
    - include: flow-type-import-type

    - match: \{
      scope: punctuation.section.block.begin.js
      set: import-brace
    - match: '{{non_reserved_identifier}}'
      scope: variable.other.readwrite.js
      pop: 1
    - match: \*
      scope: constant.other.js
      pop: 1
    - include: else-pop

  constructor:
    - match: new{{identifier_break}}
      scope: keyword.operator.word.new.js
      set:
        - match: (?=\s*\.)
          set: new-target
        - match: (?=\s*\S)
          set:
            - constructor-meta
            - constructor-body-expect-arguments
            - constructor-body-expect-class-end
            - constructor-body-expect-class-begin

  call-path:
    - match: '{{dot_accessor}}'
      scope: punctuation.accessor.js
      push: object-property
    - include: else-pop

  switch-block:
    - match: \{
      scope: punctuation.section.block.begin.js
      set: switch-block-contents
    - include: else-pop

  literal-string:
    - include: literal-double-quoted-string
    - include: literal-single-quoted-string

  flow-type-module-contents:
    - match: \}
      scope: punctuation.section.block.end.js
      pop: true
    - include: main

  parenthesized-expression:
    - match: \(
      scope: punctuation.section.group.begin.js
      set:
        - meta_scope: meta.group.js
        - match: \)
          scope: punctuation.section.group.end.js
          pop: true
        - match: (?=:)
          push: flow-type-annotation
        - match: (?=\S)
          push: expression

  jsx-html-escapes:
    - match: (&)#?[[:alnum:]]+(;)
      scope: constant.character.escape.js
      captures:
        1: punctuation.definition.entity.js
        2: punctuation.definition.entity.js

  flow-type-special:
    - match: any{{identifier_break}}
      scope: support.type.any.js
      pop: true

    - match: mixed{{identifier_break}}
      scope: support.type.mixed.js
      pop: true

  function-parameter-binding-spread:
    - match: \.\.\.
      scope: keyword.operator.spread.js
      push: function-parameter

  statements:
    - match: \)|\}|\]
      scope: invalid.illegal.stray-bracket-end.js
      pop: 1

    - match: (?=\S)
      push: statement

  variable-binding-object-destructuring:
    - match: \{
      scope: punctuation.section.mapping.begin.js
      set:
        - meta_scope: meta.binding.destructuring.mapping.js
        - match: \}
          scope: punctuation.section.mapping.end.js
          pop: 1
        - include: variable-binding-spread
        - match: (?={{identifier_start}}|\[|'|")
          push:
            - initializer
            - variable-binding-object-alias
            - object-literal-meta-key
            - variable-binding-object-key
        - include: comma-separator

  flow-type-alias-initializer:
    - match: '='
      scope: keyword.operator.assignment.js
      set:
        - flow-type-meta
        - flow-type
    - include: else-pop
  support-property-ecma-arraybuffer:
    - match: isView{{identifier_break}}
      scope: support.function.builtin.js
      pop: 1

  left-expression-end:
    - include: expression-break

    - match: (?=`)
      push: literal-string-template

    - match: (?=(?:{{dot_accessor}})?\()
      push: function-call-arguments

    - include: property-access

    - include: else-pop

  arrow-function-expect-arrow:
    - match: =>
      scope: keyword.declaration.function.arrow.js
      pop: 1
    - include: else-pop

  decorator:
    - match: '@'
      scope: punctuation.definition.annotation.js
      push:
        - decorator-meta
        - decorator-expression-end
        - decorator-expression-begin

  class-body:
    - match: \{
      scope: punctuation.section.block.begin.js
      set: class-body-contents

    - include: else-pop

  postfix-operators:
    - match: --
      scope: keyword.operator.arithmetic.js
    - match: \+\+
      scope: keyword.operator.arithmetic.js

  while-meta:
    - meta_include_prototype: false
    - meta_scope: meta.while.js
    - include: immediately-pop

  expression-begin:
    - include: jsx-tag-hack

    - include: flow-arrow-function-declaration-with-type-parameters

    - include: expression-break

    - include: yield-expression
    - include: await-expression

    - include: regexp-complete
    - include: literal-string
    - include: literal-string-template
    - include: constructor
    - include: literal-number
    - include: prefix-operators
    - include: import-meta-expression

    - include: class
    - include: special-name

    - include: regular-function

    - match: (?={{reserved_word}})
      pop: 1

    - match: (?={{identifier_name}}{{function_assignment_lookahead}})
      set:
        - function-name-meta
        - literal-variable

    - include: object-literal

    # Newline not allowed between `async` and parameters.
    - match: (?=async{{identifier_break}}{{nothing}}{{possible_arrow_function_begin}})
      pop: 1
      branch_point: async-arrow-function
      branch:
        - async-arrow-function
        - literal-variable

    - include: literal-call

    - match: (?={{possible_arrow_function_begin}})
      pop: 1
      branch_point: arrow-function
      branch:
        - branch-possible-arrow-function
        - arrow-function-declaration

    - include: array-literal

    - include: literal-private-variable

    - include: else-pop

  method-declaration-expect-asterisk:
    - match: \*
      scope: keyword.generator.asterisk.js
    - include: else-pop

  variable-declaration:
    - match: (?:const|let|var){{identifier_break}}
      scope: keyword.declaration.js
      set:
        - expect-semicolon
        - variable-binding-list-top
        - variable-binding-top

  array-literal:
    - match: \[
      scope: punctuation.section.sequence.begin.js
      set:
        - meta_scope: meta.sequence.js
        - match: \]
          scope: punctuation.section.sequence.end.js
          pop: 1
        - include: expression-list

  branch-possible-arrow-function:
    - match: (?=<)
      set: jsx-tag

    - match: (?=\()
      set:
        - detect-arrow
        - flow-detect-arrow-function-return-type
        - parenthesized-expression

    - meta_include_prototype: false
    - match: (?=\()
      set:
        - detect-arrow
        - parenthesized-expression
    - match: (?={{identifier_start}})
      set:
        - detect-arrow
        - literal-variable

  ternary-operator-expect-colon:
    - match: ':'
      scope: keyword.operator.ternary.js
      set: expression-no-comma
    - include: else-pop

  jsx-meta:
    - meta_include_prototype: false
    - meta_scope: meta.jsx.js
    - include: immediately-pop

  expression-statement-continuation:
    - match: (?=\+\+|--)
      fail: expression-statement-continuation
    - match: |-
        (?x)
        (?=
          !=
        | [-+*/%><=&|^\[(;,.:?]
        | (?:in|instanceof){{identifier_break}}
        )
      pop: 1
    - match: (?=\S)
      fail: expression-statement-continuation

  prefixed-method:
    - match: (?:get|set){{identifier_break}}
      scope: storage.type.accessor.js
      set:
        - meta_scope: meta.function.js
        - match: (?={{class_element_name}})
          set: method-declaration
        - match: (?=\S)
          fail: prefixed-method
    - match: (?:async){{identifier_break}}
      scope: keyword.declaration.async.js
      set:
        - meta_scope: meta.function.js
        - match: (?=\*|{{class_element_name}})
          set: method-declaration
        - match: (?=\S)
          fail: prefixed-method

  block-comments:
    # empty block comments
    - match: /\*\*+/
      scope: comment.block.empty.js punctuation.definition.comment.js
    # documentation block comments
    - match: /\*\*+
      scope: punctuation.definition.comment.begin.js
      push:
        - jsdoc-comment-body
        - jsdoc-block-tag
    # normal block comments
    - match: /\*
      scope: punctuation.definition.comment.begin.js
      push: block-comment-body

  jsx-interpolation:
    - match: (?={/\*)
      branch_point: jsx-interpolation-comment
      branch:
        - jsx-interpolation-comment
        - jsx-interpolation-plain
    - match: (?={)
      push: jsx-interpolation-plain

  object-literal-meta-key:
    - meta_scope: meta.mapping.key.js
    - include: else-pop

  block-comment-end:
    - match: \*+/
      scope: punctuation.definition.comment.end.js
      pop: 1

  computed-property-name:
    - match: \[
      scope: punctuation.section.brackets.begin.js
      set:
        - meta_scope: meta.brackets.js
        - match: \]
          scope: punctuation.section.brackets.end.js
          pop: 1
        - match: (?=\S)
          push: expression

  flow-type-primitive:
    - match: boolean{{identifier_break}}
      scope: support.type.primitive.boolean.js
      pop: true

    - match: number{{identifier_break}}
      scope: support.type.primitive.number.js
      pop: true

    - match: string{{identifier_break}}
      scope: support.type.primitive.string.js
      pop: true

    - match: null{{identifier_break}}
      scope: support.type.primitive.null.js
      pop: true

    - match: void{{identifier_break}}
      scope: support.type.primitive.void.js
      pop: true

  function-declaration-expect-name:
    - match: '{{non_reserved_identifier}}'
      scope: entity.name.function.js
      pop: 1
    - include: else-pop

  expect-parenthesized-expression:
    - include: parenthesized-expression
    - include: else-pop

  expression-end-no-comma:
    - match: (?=,)
      pop: 1
    - include: expression-end

  method-declaration:
    - meta_include_prototype: false
    - match: ''
      set:
        - function-meta
        - function-declaration-expect-body
        - flow-type-annotation
        - function-declaration-expect-parameters
        - flow-type-generic-parameters
        - method-name
        - method-declaration-expect-asterisk

  binary-operators:
    - match: instanceof{{identifier_break}}
      scope: keyword.operator.js
      push: expression-begin
    - match: in{{identifier_break}}
      scope: keyword.operator.js
      push: expression-begin
    - match: =(?![=>])
      scope: keyword.operator.assignment.js
      push: expression-begin
    - match: |-
        (?x)
        %=   | # assignment      right-to-left   both
        &=   | # assignment      right-to-left   both
        \*=  | # assignment      right-to-left   both
        \+=  | # assignment      right-to-left   both
        -=   | # assignment      right-to-left   both
        /=   | # assignment      right-to-left   both
        \^=  | # assignment      right-to-left   both
        \|=  | # assignment      right-to-left   both
        <<=  | # assignment      right-to-left   both
        >>=  | # assignment      right-to-left   both
        >>>= | # assignment      right-to-left   both
        &&=   |
        \|\|= |
        \?\?=
      scope: keyword.operator.assignment.augmented.js
      push: expression-begin
    - match: '&&|\|\|'
      scope: keyword.operator.logical.js
      push: expression-begin
    - match: \?\?
      scope: keyword.operator.null-coalescing.js
      push: expression-begin
    - match: |-
        (?x)
        <<   | # bitwise-shift   left-to-right   both
        >>>  | # bitwise-shift   left-to-right   both
        >>   | # bitwise-shift   left-to-right   both
        &    | # bitwise-and     left-to-right   both
        \^   | # bitwise-xor     left-to-right   both
        \|     # bitwise-or      left-to-right   both
      scope: keyword.operator.bitwise.js
      push: expression-begin
    - match: |-
        (?x)
        <=   | # comparison      left-to-right   both
        >=   | # comparison      left-to-right   both
        <    | # comparison      left-to-right   both
        >      # comparison      left-to-right   both
      scope: keyword.operator.comparison.js
      push: expression-begin
    - match: |-
        (?x)
        ===  | # equality        left-to-right   both
        !==  | # equality        left-to-right   both
        ==   | # equality        left-to-right   both
        !=     # equality        left-to-right   both
      scope: keyword.operator.comparison.js
      push: expression-begin
    - match: |-
        (?x)
        /    | # division        left-to-right   both
        %    | # modulus         left-to-right   both
        \*   | # multiplication  left-to-right   both
        \+   | # addition        left-to-right   both
        -      # subtraction     left-to-right   both
      scope: keyword.operator.arithmetic.js
      push: expression-begin
    - match: ','
      scope: keyword.operator.comma.js # Comma operator, not punctuation.
      push: expression-begin

  object-literal-property:
    - match: ''
      set:
        - object-literal-property-check
        - object-literal-meta-key
        - object-property-name

  regular-function:
    - match: (?={{func_lookahead}})
      set: function-declaration

  expression-end:
    - include: flow-function-type-arguments-or-less-than

    - include: postfix-operators
    - include: binary-operators
    - include: ternary-operator

    - include: left-expression-end

  expression-no-comma:
    - meta_include_prototype: false
    - match: ''
      set: [expression-end-no-comma, expression-begin]

  support-variable-ecma:
    - match: Array{{identifier_break}}
      scope: support.class.builtin.js
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-ecma-array
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: ArrayBuffer{{identifier_break}}
      scope: support.class.builtin.js
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-ecma-arraybuffer
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: Atomics{{identifier_break}}
      scope: support.constant.builtin.js
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-ecma-atomics
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: BigInt{{identifier_break}}
      scope: support.class.builtin.js
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-ecma-bigint
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: Date{{identifier_break}}
      scope: support.class.builtin.js
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-ecma-date
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: JSON{{identifier_break}}
      scope: support.constant.builtin.js
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-ecma-json
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: Math{{identifier_break}}
      scope: support.constant.builtin.js
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-ecma-math
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: Number{{identifier_break}}
      scope: support.class.builtin.js
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-ecma-number
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: Object{{identifier_break}}
      scope: support.class.builtin.js
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-ecma-object
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: Promise{{identifier_break}}
      scope: support.class.builtin.js
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-ecma-promise
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: Proxy{{identifier_break}}
      scope: support.class.builtin.js
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-ecma-proxy
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: Reflect{{identifier_break}}
      scope: support.constant.builtin.js
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-ecma-reflect
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: String{{identifier_break}}
      scope: support.class.builtin.js
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-ecma-string
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: Symbol{{identifier_break}}
      scope: support.class.builtin.js
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-ecma-symbol
            - include: object-property
            - include: else-pop
        - include: else-pop

    - match: |-
        (?x:
          (?:
            BigInt64|
            BigUint64|
            Float(?:32|64)|
            Int(?:8|16|32)|
            Uint(?:8|16|32|32Clamped)
          )
          Array{{identifier_break}}
        )
      scope: support.class.builtin.js
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set:
            - include: support-property-ecma-typedarray
            - include: object-property
            - include: else-pop
        - include: else-pop

    # Classes with no constructor properties
    - match: (?:Boolean|DataView|Function|Map|RegExp|Set|WeakMap|WeakSet){{identifier_break}}
      scope: support.class.builtin.js
      pop: 1
    - match: (?:Eval|Range|Reference|Syntax|Type|URI)?Error{{identifier_break}}
      scope: support.class.builtin.js
      pop: 1

    - match: (?:eval|isFinite|isNaN|parseFloat|parseInt|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent){{identifier_break}}
      scope: support.function.js
      pop: 1

  special-identifier:
    # These are ordinary identifiers, not reserved words
    - match: arguments{{identifier_break}}
      scope: variable.language.arguments.js
      pop: 1
    - match: globalThis{{identifier_break}}
      scope: variable.language.global.js
      pop: 1
    - match: undefined{{identifier_break}}
      scope: constant.language.undefined.js
      pop: 1
    - match: NaN{{identifier_break}}
      scope: constant.language.nan.js
      pop: 1
    - match: Infinity{{identifier_break}}
      scope: constant.language.infinity.js
      pop: 1

  import-statement:
    - match: import{{identifier_break}}
      scope: keyword.control.import-export.js
      set:
        - import-meta
        - expect-semicolon
        - import-assert
        - import-string-or-items
        - import-check-branch

  export-item:
    - match: \{
      scope: punctuation.section.block.begin.js
      set: export-brace
    - match: '{{non_reserved_identifier}}'
      scope: variable.other.readwrite.js
      pop: 1
    - match: \*
      scope: constant.other.js
      pop: 1
    - include: else-pop

  class-meta:
    - meta_include_prototype: false
    - meta_scope: meta.class.js
    - include: immediately-pop

  flow-type-begin:
    - include: flow-type-existential
    - include: flow-type-literal
    - include: flow-type-special
    - include: flow-type-primitive
    - include: flow-type-utility
    - include: flow-type-typeof
    - include: flow-type-class
    - include: flow-type-function
    - include: flow-type-tuple
    - include: flow-type-object

    - include: else-pop

  function-parameter-binding-pattern:
    - match: ''
      set:
        -   - include: flow-type-annotation-optional
        -   - include: function-parameter-binding-name
            - include: function-parameter-binding-array-destructuring
            - include: function-parameter-binding-object-destructuring
            - include: else-pop

  flow-arrow-return-type:
    - match: ''
      push:
        - flow-detect-arrow-after-return-type
        - flow-arrow-function-return-type-annotation

  literal-double-quoted-string:
    - match: \"
      scope: punctuation.definition.string.begin.js
      set: literal-double-quoted-string-content

  import-brace:
    - include: flow-type-import-type

    - meta_scope: meta.block.js
    - include: comma-separator
    - match: \}
      scope: punctuation.section.block.end.js
      pop: 1
    - match: '{{identifier_name}}'
      scope: variable.other.readwrite.js
      push: import-export-alias
    - match: \*
      scope: constant.other.js
      push: import-export-alias
    - include: else-pop

  flow-type-literal:
    - match: true{{identifier_break}}
      scope: constant.language.boolean.true.js
      pop: true
    - match: false{{identifier_break}}
      scope: constant.language.boolean.false.js
      pop: true
    - match: (?=\d)
      set:
        -   - match: '{{identifier_part}}+'
              scope: invalid.illegal.js
            - include: immediately-pop
        - literal-number
    - match: (?=['"])
      set: literal-string

  import-statement-or-import-meta:
    - match: (?=import{{identifier_break}})
      branch_point: import-statement
      branch:
        - import-statement
        - expression-statement

  jsx-body:
    - meta_include_prototype: false

    - match: <
      scope: punctuation.definition.tag.begin.js
      set:
        - meta_scope: meta.tag.js

        - match: /
          scope: punctuation.definition.tag.begin.js
          set:
            - jsx-expect-tag-end
            - jsx-tag-name

        - match: (?=\S)
          set:
            - jsx-body
            - jsx-tag-attributes
            - jsx-tag-name

    - include: jsx-html-escapes
    - include: jsx-interpolation
  flow-type-generic-arguments:
    - match: <
      scope: punctuation.definition.generic.begin.js region.greenish
      set:
        -   - meta_scope: meta.generic.js
            - match: '>'
              scope: punctuation.definition.generic.end.js
              pop: true
            - match: ','
              scope: punctuation.separator.comma.js
              push: flow-type
            - match: (?=\S)
              fail: flow-arrow-function-return-type
        - flow-type

  import-export-from:
    - match: from{{identifier_break}}
      scope: keyword.control.import-export.js
      set: literal-string
    - include: else-pop

  expression-end-no-in:
    - match: (?=in{{identifier_break}})
      pop: 1
    - include: expression-end

  literal-string-template-content:
    - meta_include_prototype: false
    - meta_scope: meta.string.js string.quoted.other.js
    - match: \`
      scope: punctuation.definition.string.end.js
      pop: 1
    - include: string-interpolations
    - include: string-content

  flow-type-existential:
    - match: \*
      scope: constant.language.type.existential.js
      pop: true

  expression-break:
    - match: (?=[;})\]])
      pop: 1

  shebang-body:
    - meta_include_prototype: false
    - meta_scope: comment.line.shebang.js
    # Note: Keep sync with first_line_match!
    - match: '{{shebang_lang}}'
      scope: constant.language.shebang.js
    - match: \n
      pop: 1

  line-comment-double-slash-body:
    - meta_include_prototype: false
    - meta_scope: comment.line.double-slash.js
    - include: line-comment-end

  catch-binding:
    - match: \(
      scope: punctuation.section.group.begin.js
      set:
        - catch-binding-end
        - variable-binding-pattern
    - include: else-pop

  flow-type-end-no-arrow:
    - match: (?==>)
      pop: true
    - include: flow-type-end

  flow-type-utility:
    - match: |-
        (?x) (?:
          Class|Function|
          \$(?:
            Keys|Values|ReadOnly|Exact|Diff|Rest|PropertyType|ElementType|
            ObjMap|TupleMap|Call|Supertype|Subtype
          )
        ){{identifier_break}}
      scope: support.type.utility.js
      pop: true

  literal-variable-base:
    - match: '{{dollar_only_identifier}}'
      scope: variable.other.dollar.only.js punctuation.dollar.js
      pop: 1
    - match: '{{dollar_identifier}}'
      scope: variable.other.dollar.js
      captures:
        1: punctuation.dollar.js
      pop: 1
    - match: '{{constant_identifier}}'
      scope: variable.other.constant.js
      pop: 1
    - match: '{{identifier_name}}'
      scope: variable.other.readwrite.js
      pop: 1
    - include: literal-private-variable

  string-interpolation-content:
    - clear_scopes: 1
    - meta_scope: meta.interpolation.js
    - meta_content_scope: source.js.embedded
    - match: \}
      scope: punctuation.section.interpolation.end.js
      pop: 1
    - match: (?=\S)
      push: expression

  support-property-ecma-atomics:
    - match: (?:and|add|compareExchange|exchange|isLockFree|load|or|store|sub|wait|wake|xor){{identifier_break}}
      scope: support.function.builtin.js
      pop: 1

  decorator-expression-pop:
    # Consume only comments (ignore patterns from inheriting syntaxes)
    # and clear `meta.annotation` scope so it looks like the comment not being
    # part of the annotation anymore.
    # Pop `decorator-expression-end` at the same text point the previous branch
    # fails at in order to prevent ST's syntax engine to lock up.
    # see: https://github.com/sublimehq/sublime_text/issues/5853
    - clear_scopes: 1
    - meta_include_prototype: false
    - include: comments
    - include: else-pop-2

  arrow-function-declaration:
    - meta_include_prototype: false
    - match: ''
      set:
        - function-meta
        - arrow-function-expect-body
        - arrow-function-expect-arrow
        - flow-arrow-function-return-type-annotation
        - arrow-function-expect-parameters
        - flow-type-generic-parameters

  async-arrow-function:
    - match: async{{identifier_break}}
      scope: keyword.declaration.async.js
      set:
        - function-meta
        - arrow-function-expect-body
        - arrow-function-expect-arrow-or-fail-async
        - arrow-function-expect-parameters

  initializer:
    - match: '='
      scope: keyword.operator.assignment.js
      set: expression-no-comma
    - include: else-pop

  support-property-ecma-promise:
    - match: (?:all|race|reject|resolve|allSettled|any){{identifier_break}}
      scope: support.function.builtin.js
      pop: 1

  inherited-class-expression-begin:
    - include: inherited-class-name
    - include: expression-begin

  literal-variable:
    - include: special-identifier
    - include: support

    - match: (?={{identifier_name}}{{function_assignment_lookahead}})
      set:
        - function-name-meta
        - literal-variable-base

    - match: '{{identifier_name}}(?={{nothing}}`)'
      scope: variable.function.tagged-template.js
      pop: 1

    - match: '{{constant_identifier}}(?=\s*(?:{{dot_accessor}}|\[))'
      scope: support.class.js
      pop: 1

    - match: '{{function_call_lookahead}}'
      set: call-function-name

    - include: literal-variable-base

  variable-binding-name:
    - match: (?={{non_reserved_identifier}})
      set:
        -   - meta_scope: meta.binding.name.js
            - include: immediately-pop
        - literal-variable

  flow-less-than:
    - match: <
      scope: keyword.operator.comparison.js
      set: expression-begin

  flow-type-tuple:
    - match: \[
      scope: punctuation.section.brackets.begin.js
      set:
        - meta_scope: meta.sequence.js
        - match: \]
          scope: punctuation.section.brackets.end.js
          pop: true
        - include: flow-type-list

  flow-type-module-body:
    - match: \{
      scope: punctuation.section.block.begin.js
      set: flow-type-module-contents
    - include: else-pop

  support-variable-console:
    # https://console.spec.whatwg.org/
    - match: console{{identifier_break}}
      scope: support.type.object.console.js
      set:
        - match: '{{dot_accessor}}'
          scope: punctuation.accessor.js
          set: builtin-console-properties
        - include: else-pop

  function-declaration-expect-function-keyword:
    - match: function{{identifier_break}}
      scope: keyword.declaration.function.js
      pop: 1
    - include: else-pop

  prefix-operators:
    - match: '~'
      scope: keyword.operator.bitwise.js
    - match: '!(?!=)'
      scope: keyword.operator.logical.js
    - match: --
      scope: keyword.operator.arithmetic.js
    - match: \+\+
      scope: keyword.operator.arithmetic.js
    - match: \.\.\.
      scope: keyword.operator.spread.js
    - match: \+|\-
      scope: keyword.operator.arithmetic.js
    - match: (?:delete|typeof|void){{identifier_break}}
      scope: keyword.operator.js

  function-declaration-expect-async:
    - match: async{{identifier_break}}
      scope: keyword.declaration.async.js
      pop: 1
    - include: else-pop

  new-target:
    - match: \.
      scope: punctuation.accessor.dot.js
      set:
        - match: target{{identifier_break}}
          scope: variable.language.target.js
          pop: 1
        - include: else-pop

    - include: else-pop

  jsx-tag-name-end:
    - match: '[:.]'
      scope: punctuation.accessor.js
      push: jsx-tag-name-component
    - include: else-pop

  string-interpolations:
    - match: \$\{
      scope: punctuation.section.interpolation.begin.js
      push: string-interpolation-content

  property-access:
    - match: ({{dot_accessor}})?(\[)
      captures:
        1: punctuation.accessor.js
        2: punctuation.section.brackets.begin.js
      push:
        - meta_scope: meta.brackets.js
        - match: \]
          scope: punctuation.section.brackets.end.js
          pop: 1
        - match: (?=\S)
          push: expression

    - match: '{{dot_accessor}}'
      scope: punctuation.accessor.js
      push:
        - match: (?={{identifier_name}}\s*(?:{{dot_accessor}})?\()
          set:
            - call-method-meta
            - function-call-arguments
            - call-path
            - object-property
        - include: object-property

  jsx-tag-name-component:
    - match: '{{jsx_identifier}}'
      scope: entity.name.tag.js
      pop: 1
    - include: else-pop

  import-assert:
    - match: assert{{identifier_break}}
      scope: keyword.control.import-export.js
      set:
        - include: object-literal
        - include: else-pop
    - include: else-pop

  function-declaration-expect-body:
    - include: function-block
    - include: else-pop

  await-expression:
    - match: await{{identifier_break}}
      scope: keyword.control.flow.await.js

  variable-binding-top:
    - match: (?={{binding_pattern_lookahead}})
      set:
        - initializer
        - variable-binding-pattern
    - include: else-pop

  decorator-expression-begin:
    - include: decorator-name
    - include: parenthesized-expression
    - include: expression-begin

  import-expression-end:
    - match: (?=\()
      set: function-call-arguments
    - match: '{{dot_accessor}}'
      scope: punctuation.accessor.js
      set:
        - match: meta{{identifier_break}}
          scope: variable.language.import.js
          pop: 1
        - include: object-property
    - include: else-pop
  expression-statement:
    - match: (?=\S)
      set:
        - expect-semicolon
        - expression-statement-end
        - expression-begin

  export-meta:
    - meta_include_prototype: false
    - meta_scope: meta.export.js
    - include: immediately-pop

  expression:
    - meta_include_prototype: false
    - match: ''
      set: [expression-end, expression-begin]

  jsx-tag-hack: []
  support-property-ecma-math:
    - match: (?:E|LN10|LN2|LOG10E|LOG2E|PI|SQRT1_2|SQRT2){{identifier_break}}
      scope: support.constant.builtin.js
      pop: 1
    - match: (?:abs|acos|acosh|asin|asin|atan|atanh|atan2|cbrt|ceil|clz32|cos|cosh|exp|expm1|floor|fround|hypot|imul|log|log1p|log10|log2|max|min|pow|random|round|sign|sin|sinh|sqrt|tan|tanh|trunc){{identifier_break}}
      scope: support.function.builtin.js
      pop: 1

  support:
    - include: support-variable-ecma
    - include: support-variable-console
    - include: support-variable-dom
    - include: support-variable-node

  call-function-meta:
    - meta_include_prototype: false
    - meta_scope: meta.function-call.js
    - include: immediately-pop

  object-literal:
    - match: \{
      scope: punctuation.section.mapping.begin.js
      set: object-literal-contents

  try-meta:
    - meta_include_prototype: false
    - meta_scope: meta.try.js
    - include: immediately-pop

  export-list:
    - match: ','
      scope: punctuation.separator.comma.js
      push:
        - import-export-alias
        - export-item
    - include: else-pop

  flow-detect-arrow-function-return-type:
    - match: (?=:)
      pop: true
      branch_point: flow-arrow-function-return-type
      branch:
        - flow-arrow-return-type
        - immediately-pop
    - include: else-pop

  arrow-function-expect-arrow-or-fail-async:
    - match: =>
      scope: keyword.declaration.function.arrow.js
      pop: 1
    - match: (?=\S)
      fail: async-arrow-function

  support-property-ecma-typedarray:
    - match: (?:BYTES_PER_ELEMENT){{identifier_break}}
      scope: support.constant.builtin.js
      pop: 1

  decorator-expression-end:
    - match: '{{dot_accessor}}'
      scope: punctuation.accessor.js
      push:
        - include: decorator-name
        - include: object-property

    - match: (?=`)
      push: literal-string-template

    - match: (?=(?:{{dot_accessor}})?\()
      push: function-call-arguments

    - match: '{{line_ending_ahead}}'
      branch_point: decorator-expression-continuation
      branch:
        - decorator-expression-continuation
        - decorator-expression-pop

    - include: else-pop

  arrow-function-expect-parameters:
    - match: (?={{identifier_start}})
      set:
        - clear_scopes: 1
        - meta_scope: meta.function.parameters.js
        - match: '{{identifier_name}}'
          scope: variable.parameter.function.js
          pop: 1
    - include: function-declaration-parameters
    - include: else-pop

  else-pop-2:
    - match: (?=\S)
      pop: 2

  flow-detect-arrow-after-return-type:
    - match: (?==>)
      fail: arrow-function
    - match: (?=\S)
      fail: flow-arrow-function-return-type

  function-declaration-expect-parameters:
    - include: function-declaration-parameters
    - include: else-pop

  class:
    - match: class{{identifier_break}}
      scope: keyword.declaration.class.js
      set:
        - class-meta
        - class-body
        - class-extends
        - class-name

  jsx-tag-name-meta:
    - clear_scopes: 1
    - meta_include_prototype: false
    - meta_scope: meta.tag.name.js
    - include: immediately-pop

  yield-expression:
    - match: yield{{identifier_break}}
      scope: keyword.control.flow.yield.js
      set:
        - match: $
          pop: 1
        - match: \*
          scope: keyword.generator.asterisk.js
          set: expression-begin
        - match: (?=\S)
          set: expression-begin

  block:
    - match: \{
      scope: punctuation.section.block.begin.js
      set:
        - meta_scope: meta.block.js
        - match: \}
          scope: punctuation.section.block.end.js
          pop: 1
        - include: statements

  jsx-interpolation-comment:
    - match: ({)(/\*)
      captures:
        1: punctuation.definition.interpolation.begin.js
        2: punctuation.definition.comment.begin.js
      set:
        - meta_include_prototype: false
        - meta_scope: meta.interpolation.js comment.block.js
        - match: (\*/)(})
          captures:
            1: punctuation.definition.comment.end.js
            2: punctuation.definition.interpolation.end.js
          pop: 1
        - match: (?=\*/)
          fail: jsx-interpolation-comment

  flow-type-object-indexer-type:
    - match: \]
      scope: punctuation.section.brackets.end.js
      pop: true
    - include: flow-type-list

  else-pop:
    - match: (?=\S)
      pop: 1

  literal-single-quoted-string:
    - match: \'
      scope: punctuation.definition.string.begin.js
      set: literal-single-quoted-string-content

  jsx-tag:
    - match: <
      scope: punctuation.definition.tag.begin.js
      set:
        - jsx-meta
        - jsx-tag-attributes-top

  flow-type-meta:
    - meta_scope: meta.flow-type.js
    - include: immediately-pop

  function-declaration-parameters:
    - match: \(
      scope: punctuation.section.group.begin.js
      set:
        - clear_scopes: 1
        - meta_scope: meta.function.parameters.js
        - match: \)
          scope: punctuation.section.group.end.js
          pop: 1
        - include: function-parameter-binding-list

  flow-jsx-tag-check:
    - match: (?=[:,])
      fail: arrow-function
    - include: else-pop
  script:
    - match: \)|\}|\]
      scope: invalid.illegal.stray-bracket-end.js
      # Don't pop or embedding could break.

    - include: statements

  regexp:
    - meta_include_prototype: false
    - meta_scope: meta.string.js string.regexp.js
    - match: /
      scope: punctuation.definition.string.end.js
      set:
        - meta_include_prototype: false
        - meta_content_scope: meta.string.js string.regexp.js
        - match: '[gimyus]'
          scope: keyword.other.js
        - match: '[A-Za-z0-9]'   # Ignore unknown flags for future-compatibility
        - include: immediately-pop
    - match: (?=.|\n)
      push:
        - meta_include_prototype: false
        - match: (?=/)
          pop: 1
        - include: scope:source.regexp.js

  function-parameter-binding-name:
    - match: '{{dollar_identifier}}'
      scope: meta.binding.name.js variable.parameter.function.js
      captures:
        1: punctuation.dollar.js
    - match: '{{non_reserved_identifier}}'
      scope: meta.binding.name.js variable.parameter.function.js
    - match: '{{identifier_name}}'
      scope: invalid.illegal.identifier.js meta.binding.name.js variable.parameter.function.js

  support-property-ecma-string:
    - match: (?:fromCharCode|fromCodePoint|raw){{identifier_break}}
      scope: support.function.builtin.js
      pop: 1

  for-meta:
    - meta_include_prototype: false
    - meta_scope: meta.for.js
    - include: immediately-pop

  export-statement:
    - match: export{{identifier_break}}
      scope: keyword.control.import-export.js
      set:
        - export-meta
        - export-extended

  special-name:
    - match: true{{identifier_break}}
      scope: constant.language.boolean.true.js
      pop: 1
    - match: false{{identifier_break}}
      scope: constant.language.boolean.false.js
      pop: 1
    - match: null{{identifier_break}}
      scope: constant.language.null.js
      pop: 1
    - match: super{{identifier_break}}
      scope: variable.language.super.js
      pop: 1
    - match: this{{identifier_break}}
      scope: variable.language.this.js
      pop: 1

  object-property-base:
    - match: '{{dollar_only_identifier}}'
      scope: meta.property.object.dollar.only.js punctuation.dollar.js
      pop: 1
    - match: '{{dollar_identifier}}'
      scope: meta.property.object.dollar.js
      captures:
        1: punctuation.dollar.js
      pop: 1
    - match: '{{identifier_name}}'
      scope: meta.property.object.js
      pop: 1
    - match: '{{identifier_part}}+{{identifier_break}}'
      scope: invalid.illegal.illegal-identifier.js
      pop: 1
    - match: (#)({{identifier_name}})
      captures:
        1: punctuation.definition.variable.js
        2: meta.property.object.js
      pop: 1

  object-property:
    - include: support-property

    - match: (?=\#?{{identifier_name}}{{function_assignment_lookahead}})
      set:
        - function-name-meta
        - object-property-base

    - match: (?=#?{{identifier_name}}\s*(?:{{dot_accessor}})?\()
      set: call-method-name

    - match: '{{identifier_name}}(?={{nothing}}`)'
      scope: variable.function.tagged-template.js
      pop: 1

    - include: object-property-base
    - include: else-pop

  class-element-modifiers:
    - match: ''
      pop: 1
      branch_point: class-element-modifier
      branch:
        - class-element-modifier
        - class-element

  support-property-ecma-array:
    - match: (?:from|isArray|of){{identifier_break}}
      scope: support.function.builtin.js
      pop: 1

  class-name:
    - match: '{{non_reserved_identifier}}'
      scope: entity.name.class.js
      set: flow-type-generic-parameters
    - include: else-pop

  catch-meta:
    - meta_include_prototype: false
    - meta_scope: meta.catch.js
    - include: immediately-pop

  constructor-body-expect-class-end:
    - include: property-access
    - include: else-pop

  class-element:
    - match: ''
      pop: 1
      branch_point: class-field
      branch:
        - class-field
        - method-declaration

  jsx-tag-attributes:
    - meta_scope: meta.tag.attributes.js

    - match: '>'
      scope: punctuation.definition.tag.end.js
      set: jsx-body

    - match: /
      scope: punctuation.definition.tag.end.js
      set: jsx-expect-tag-end

    - include: jsx-interpolation

    - match: '{{jsx_identifier}}'
      scope: entity.other.attribute-name.js

    - match: '='
      scope: punctuation.separator.key-value.js
      push: jsx-attribute-value

  restricted-production:
    - meta_include_prototype: false
    - match: '{{line_ending_ahead}}'
      pop: 1
    - match: ''
      set: expression-statement

  declaration:
    - include: variable-declaration
    - include: class
    - include: regular-function

  flow-arrow-function-return-type-annotation:
    - match: ':'
      scope: punctuation.separator.type.js
      set:
        - flow-type-meta
        - flow-type-end-no-arrow
        - flow-type-begin
    - match: (?!\s*(?:$|:|//|/\*))
      pop: true

  support-property-node-module:
    - match: (?:children|exports|filename|id|loaded|parent|paths){{identifier_break}}
      scope: support.constant.node.js
      pop: 1
    - match: require{{identifier_break}}
      scope: support.function.node.js
      pop: 1

  function-call-arguments:
    - match: ({{dot_accessor}})?(\()
      captures:
        1: punctuation.accessor.js
        2: punctuation.section.group.begin.js
      set:
        - meta_scope: meta.group.js
        - match: \)
          scope: punctuation.section.group.end.js
          pop: 1
        - include: expression-list

  flow-type-import-type:
    - match: type{{identifier_break}}
      scope: keyword.declaration.js

    - match: typeof{{identifier_break}}
      scope: keyword.operator.js

  literal-single-quoted-string-content:
    - meta_include_prototype: false
    - meta_scope: meta.string.js string.quoted.single.js
    - match: \'
      scope: punctuation.definition.string.end.js
      pop: 1
    - match: \n
      scope: invalid.illegal.newline.js
      pop: 1
    - include: string-content

  call-method-meta:
    - meta_include_prototype: false
    - meta_scope: meta.function-call.method.js
    - include: immediately-pop

  export-brace:
    - meta_scope: meta.block.js
    - include: comma-separator
    - match: \}
      scope: punctuation.section.block.end.js
      pop: 1
    - match: '{{identifier_name}}'
      scope: variable.other.readwrite.js
      push: import-export-alias
    - match: \*
      scope: constant.other.js
      push: import-export-alias
    - include: else-pop

  function-declaration-expect-generator-star:
    - match: \*
      scope: keyword.declaration.generator.js
      pop: 1
    - include: else-pop

  support-variable-dom:
    - match: XMLHttpRequest{{identifier_break}}
      scope: support.class.dom.js
      pop: 1
    - match: (?:document|window|navigator){{identifier_break}}
      scope: support.type.object.dom.js
      pop: 1
    - match: (?:clearTimeout|clearInterval|setTimeout|setInterval){{identifier_break}}
      scope: support.function.dom.js
      pop: 1

  block-comment-body:
    - meta_include_prototype: false
    - meta_scope: comment.block.js
    - include: block-comment-end

  prototype:
    - include: comments

  flow-function-type-arguments:
    - match: \<(?!<)
      scope: punctuation.definition.generic.begin.js region.redish
      set:
        -   - match: (?=[\]()};,`])
              pop: true
            - match: (?=\S)
              fail: flow-function-type-arguments
        -   - meta_scope: meta.generic.js
            - match: \>
              scope: punctuation.definition.generic.end.js
              pop: true
            - match: ','
              scope: punctuation.separator.comma.js
              push: flow-type
            - match: (?=\S)
              fail: flow-function-type-arguments
        - flow-type

  function-name-meta:
    - meta_include_prototype: false
    - meta_scope: entity.name.function.js
    - include: immediately-pop

  object-literal-element:
    - match: '{{identifier_name}}(?=\s*(?:[},]|$|//|/\*))'
      scope: variable.other.readwrite.js
      pop: 1
    - match: (?=\S)
      pop: 1
      branch_point: object-literal-property
      branch:
        - object-literal-property
        - method-declaration

  jsx-tag-attributes-top:
    - meta_scope: meta.tag.js
    - match: /
      scope: punctuation.definition.tag.begin.js
      set:
        - jsx-meta-unmatched-tag
        - jsx-expect-tag-end
        - jsx-tag-name

    - match: (?=\S)
      set:
        - jsx-tag-attributes
        - flow-jsx-tag-check
        - jsx-tag-name
        - flow-jsx-tag-check-name

  flow-type-function:
    - match: \(
      scope: punctuation.section.grouping.begin.js
      set:
        - meta_scope: meta.group.js
        - match: \)
          scope: punctuation.section.grouping.end.js
          pop: true
        - include: flow-type-list

  function-parameter-binding-object-alias:
    - match: ':'
      scope: punctuation.separator.key-value.js
      set: function-parameter-binding-pattern
    - include: else-pop

  flow-type-typeof:
    - match: typeof{{identifier_break}}
      scope: keyword.operator.js
      set:
        - left-expression-end
        - expression-begin

  builtin-console-properties:
    - match: (?:warn|info|log|error|time|timeEnd|assert|count|dir|group|groupCollapsed|groupEnd|profile|profileEnd|table|trace|timeStamp){{identifier_break}}
      scope: support.function.console.js
      pop: 1
    - include: object-property

  function-block:
    - match: \{
      scope: punctuation.section.block.begin.js
      set:
        - meta_scope: meta.block.js
        - match: \}
          scope: punctuation.section.block.end.js
          pop: 1
        - include: statements

  flow-type-declare-export:
    - match: default{{identifier_break}}
      scope: keyword.control.import-export.js
      set: flow-type
    - match: (?=\S)
      pop: true

  static-block-body:
    - meta_scope: meta.block.js
    - match: \}
      scope: punctuation.section.block.end.js
      pop: 1
    - include: statements

  for-of-rest:
    - match: (?:of|in){{identifier_break}}
      scope: keyword.operator.word.js
      set: expression

  import-meta-expression:
    - match: import{{identifier_break}}
      scope: keyword.import.js
      set: import-expression-end

  class-field:
    - match: ''
      set:
        - initializer
        - flow-type-annotation
        - class-field-check
        - field-name

  function-declaration:
    - match: ''
      set:
        - function-meta
        - function-declaration-expect-body
        - flow-type-annotation
        - function-declaration-expect-parameters
        - flow-type-generic-parameters
        - function-declaration-expect-name
        - function-declaration-expect-generator-star
        - function-declaration-expect-function-keyword
        - function-declaration-expect-async

    - match: extends{{identifier_break}}
      scope: storage.modifier.extends.js
      set:
        - inherited-class-expression-end
        - inherited-class-expression-begin
    - include: else-pop

  for-condition-end:
    - meta_scope: meta.group.js

    - match: \)
      scope: punctuation.section.group.end.js
      pop: 1

  decorator-meta:
    - meta_include_prototype: false
    - meta_scope: meta.annotation.js
    - include: immediately-pop

  for-await:
    - match: await{{identifier_break}}
      scope: keyword.control.flow.await.js
      pop: 1
    - include: else-pop

  ternary-operator:
    - match: \?(?=[^.]|\.[0-9])
      scope: keyword.operator.ternary.js
      set:
        - ternary-operator-expect-colon
        - expression-no-comma

  flow-type-end:
    - match: (?=\|\||&&)
      fail: flow-function-type-arguments
    - include: flow-type-operators
    - include: flow-type-generic-arguments
    - include: else-pop

  jsx-meta-unmatched-tag:
    - meta_include_prototype: false
    - meta_scope: invalid.illegal.unmatched-tag.js
    - include: immediately-pop

  jsx-interpolation-plain:
    - match: '{'
      scope: punctuation.definition.interpolation.begin.js
      set:
        -   - meta_scope: meta.interpolation.js
            - meta_content_scope: source.js.embedded.jsx
            - match: '}'
              scope: punctuation.definition.interpolation.end.js
              pop: 1
        - expression

  call-method-name:
    - include: support-property
    - match: '{{identifier_name}}'
      scope: variable.function.js
      pop: 1
    - match: (#){{identifier_name}}
      scope: variable.function.js
      captures:
        1: punctuation.definition.js
      pop: 1
    - include: else-pop

  literal-call:
    - match: (?={{identifier_name}}\s*(?:{{dot_accessor}})?\()
      set:
        - call-function-meta
        - function-call-arguments
        - literal-variable

    - match: (?={{identifier_name}}\s*(?:{{dot_accessor}}\s*#?{{identifier_name}}\s*)+(?:{{dot_accessor}})?\()
      set:
        - call-method-meta
        - function-call-arguments
        - call-path
        - literal-variable

  expression-statement-pop:
    # Consume only comments (ignore patterns from inheriting syntaxes) and
    # pop `expression-statement-end` at the same text point the previous branch
    # fails at in order to prevent ST's syntax engine to lock up.
    # see: https://github.com/sublimehq/sublime_text/issues/5853
    - meta_include_prototype: false
    - include: comments
    - include: else-pop-2

  import-export-alias:
    - match: as{{identifier_break}}
      scope: keyword.control.import-export.js
      set:
        - match: default{{identifier_break}}
          scope: keyword.control.import-export.js
          pop: 1
        - match: '{{identifier_name}}'
          scope: variable.other.readwrite.js
          pop: 1
        - include: literal-string
        - include: else-pop
    - include: else-pop

  line-comment-other-body:
    - meta_include_prototype: false
    - meta_scope: comment.line.other.js
    - include: line-comment-end

  flow-type-object-indexer-label:
    - match: ({{non_reserved_identifier}})\s*(:)
      captures:
        1: meta.object-literal.key.js
        2: punctuation.separator.key-value.js
      pop: true
    - include: else-pop

  export-extended:
    - include: flow-type-export-type

    - include: declaration

    - match: default{{identifier_break}}
      scope: keyword.control.import-export.js
      set:
        - include: declaration
        - match: (?=\S)
          set: expression-statement

    - match: (?=\S)
      set:
        - expect-semicolon
        - import-export-from
        - export-list
        - import-export-alias
        - export-item

  support-property-ecma-number:
    - match: (?:EPSILON|MAX_SAFE_INTEGER|MAX_VALUE|MIN_SAFE_INTEGER|MIN_VALUE|NEGATIVE_INFINITY|POSITIVE_INFINITY){{identifier_break}}
      scope: support.constant.builtin.js
      pop: 1
    - match: (?:isFinite|isInteger|isNaN|isSafeInteger|NaN|parseFloat|parseInt){{identifier_break}}
      scope: support.function.builtin.js
      pop: 1

  literal-private-variable:
    - match: (#)({{identifier_name}})
      captures:
        1: punctuation.definition.variable.js
        2: variable.other.readwrite.js
      pop: 1

  conditional:
    - match: switch{{identifier_break}}
      scope: keyword.control.conditional.switch.js
      set:
        - switch-meta
        - switch-block
        - expect-parenthesized-expression

    - match: do{{identifier_break}}
      scope: keyword.control.loop.do-while.js
      set:
        - do-while-meta
        - do-while-condition
        - statement

    - match: for{{identifier_break}}
      scope: keyword.control.loop.for.js
      set:
        - for-meta
        - block-scope
        - for-condition
        - for-await

    - match: while{{identifier_break}}
      scope: keyword.control.loop.while.js
      set:
        - while-meta
        - block-scope
        - expect-parenthesized-expression

    - match: with{{identifier_break}}
      scope: keyword.control.import.with.js
      set:
        - with-meta
        - block-scope
        - expect-parenthesized-expression

    - match: if{{identifier_break}}
      scope: keyword.control.conditional.if.js
      set:
        - conditional-meta
        - statement
        - expect-parenthesized-expression

    - match: else\s+if{{identifier_break}}
      scope: keyword.control.conditional.elseif.js
      set:
        - conditional-meta
        - statement
        - expect-parenthesized-expression

    - match: else{{identifier_break}}
      scope: keyword.control.conditional.else.js
      set:
        - conditional-meta
        - statement

    - match: try{{identifier_break}}
      scope: keyword.control.exception.try.js
      set:
        - try-meta
        - block-scope

    - match: finally{{identifier_break}}
      scope: keyword.control.exception.finally.js
      set:
        - finally-meta
        - block-scope

    - match: catch{{identifier_break}}
      scope: keyword.control.exception.catch.js
      set:
        - catch-meta
        - block-scope
        - catch-binding

  line-comment-triple-slash-body:
    - meta_include_prototype: false
    - meta_scope: comment.line.triple-slash.js
    - include: line-comment-end

  function-parameter-binding-object-key:
    - match: '{{identifier_name}}(?=\s*:)'
      pop: 1
    - include: literal-string
    - include: computed-property-name
    - include: function-parameter-binding-name
    - include: else-pop

  switch-block-contents:
    - meta_scope: meta.block.js

    - match: \}
      scope: punctuation.section.block.end.js
      pop: 1

    - match: case{{identifier_break}}
      scope: keyword.control.conditional.case.js
      push:
        - expect-case-colon
        - expression

    - match: default{{identifier_break}}
      scope: keyword.control.conditional.default.js
      push:
        - expect-case-colon

    - include: statements

  class-element-modifier:
    - match: '{{modifier}}'
      scope: storage.modifier.js
      set:
        - match: (?={{class_element_name}}|\*)
          pop: 1
        - match: (?=\S)
          fail: class-element-modifier

  decorator-name:
    - match: '{{identifier_name}}(?!\s*[.\(`])'
      scope: variable.annotation.js
      pop: 1

  statement:
    - include: flow-type-declare
    - include: flow-type-alias

    - match: \;
      scope: punctuation.terminator.statement.empty.js
      pop: 1

    - include: declaration
    - include: import-statement-or-import-meta
    - include: export-statement
    - include: conditional
    - include: block
    - include: label

    - match: break{{identifier_break}}
      scope: keyword.control.flow.break.js
      set:
        - expect-semicolon
        - expect-label

    - match: continue{{identifier_break}}
      scope: keyword.control.flow.continue.js
      set:
        - expect-semicolon
        - expect-label

    - match: debugger{{identifier_break}}
      scope: keyword.control.flow.debugger.js
      set: expect-semicolon

    - match: return{{identifier_break}}
      scope: keyword.control.flow.return.js
      set: restricted-production

    - match: throw{{identifier_break}}
      scope: keyword.control.flow.throw.js
      set: restricted-production

    - include: decorator

    - include: expression-statement

  flow-type-annotation:
    - match: ':'
      scope: punctuation.separator.type.js
      set:
        - flow-type-meta
        - flow-type
    - match: (?!\s*(?:$|:|//|/\*))
      pop: true

  field-name:
    - match: '{{dollar_identifier}}'
      scope: meta.mapping.key.dollar.js variable.other.readwrite.js
      captures:
        1: punctuation.dollar.js
      pop: 1
    - match: '{{identifier_name}}'
      scope: variable.other.readwrite.js
      pop: 1
    - match: (#)({{identifier_name}})
      captures:
        1: punctuation.definition.variable.js
        2: variable.other.readwrite.js
      pop: 1
    - match: "'"
      scope: punctuation.definition.string.begin.js
      set:
        - meta_include_prototype: false
        - meta_scope: meta.string.js string.quoted.single.js
        - meta_content_scope: variable.other.readwrite.js
        - match: \'
          scope: punctuation.definition.string.end.js
          pop: 1
        - match: \n
          scope: invalid.illegal.newline.js
          pop: 1
        - include: string-content
    - match: '"'
      scope: punctuation.definition.string.begin.js
      set:
        - meta_include_prototype: false
        - meta_scope: meta.string.js string.quoted.double.js
        - meta_content_scope: variable.other.readwrite.js
        - match: \"
          scope: punctuation.definition.string.end.js
          pop: 1
        - match: \n
          scope: invalid.illegal.newline.js
          pop: 1
        - include: string-content

    - include: computed-property-name

    - include: else-pop

  class-body-contents:
    - meta_scope: meta.block.js

    - match: \}
      scope: punctuation.section.block.end.js
      pop: 1

    - match: \;
      scope: punctuation.terminator.statement.js

    - include: decorator

    - match: constructor{{identifier_break}}
      scope: entity.name.function.constructor.js
      push:
        - function-meta
        - function-declaration-expect-body
        - function-declaration-expect-parameters

    - match: (?=static{{identifier_break}})
      branch_point: static-block
      branch:
        - static-block
        - class-element-modifiers

    - match: (?={{modifier}})
      push: class-element-modifiers

    - match: |-
        (?x)(?=
          \#? {{identifier_name}}
          \s* = \s*
          {{either_func_lookahead}}
        )
      push:
        - initializer
        - function-name-meta
        - literal-variable-base

    - match: (?=(?:get|set|async){{identifier_break}})
      branch_point: prefixed-method
      branch:
        - prefixed-method
        - class-element

    - match: (?=\*)
      push: method-declaration

    - match: (?={{class_element_name}})
      push: class-element

  expression-list:
    - include: expression-break
    - include: comma-separator
    - match: (?=\S)
      push: expression-no-comma

  flow-arrow-function-declaration-with-type-parameters: []
  expect-semicolon:
    - match: \;
      scope: punctuation.terminator.statement.js
      pop: 1
    - include: else-pop

  static-block:
    - match: static{{identifier_break}}
      scope: storage.modifier.js
      set:
        - match: \{
          scope: punctuation.section.block.begin.js
          set: static-block-body
        - match: (?=\S)
          fail: static-block

  shebang:
    - meta_include_prototype: false
    - match: ^\#!
      scope: punctuation.definition.comment.js
      set: shebang-body
    - match: ^|(?=\S)  # Note: Ensure to highlight shebang if the syntax is embedded.
      pop: 1

  function-parameter-binding-array-destructuring:
    - match: \[
      scope: punctuation.section.sequence.begin.js
      set:
        - meta_scope: meta.binding.destructuring.sequence.js
        - match: \]
          scope: punctuation.section.sequence.end.js
          pop: 1
        - include: function-parameter-binding-list

  object-literal-contents:
    - meta_scope: meta.mapping.js

    - match: \}
      scope: punctuation.section.mapping.end.js
      pop: 1

    - match: \.\.\.
      scope: keyword.operator.spread.js
      push: expression-no-comma

    - match: >-
        (?x)(?=
          {{property_name}}\s*:\s*
          {{either_func_lookahead}}
        )
      push:
        - object-literal-meta-key
        - method-name

    - match: (?=\*)
      push: method-declaration

    - match: (?=(?:get|set|async){{identifier_break}})
      branch_point: prefixed-object-literal-method
      branch:
        - prefixed-object-literal-method
        - object-literal-element

    - match: (?={{property_name}})
      push: object-literal-element

    - include: comma-separator

    - match: ':'
      scope: punctuation.separator.key-value.js
      push: expression-no-comma

    # If there's any garbage, parse it as an expression
    # so that close braces won't break things.
    - match: (?=\S)
      push: expression-no-comma

  support-property-ecma-symbol:
    - match: (?:asyncIterator|hasInstance|isConcatSpreadable|iterator|match|replace|search|species|split|toPrimitive|toStringTag|unscopeables){{identifier_break}}
      scope: support.constant.builtin.js
      pop: 1
    - match: (?:for|keyFor){{identifier_break}}
      scope: support.function.builtin.js
      pop: 1

  expression-statement-end:
    - match: '{{line_ending_ahead}}'
      branch_point: expression-statement-continuation
      branch:
        - expression-statement-continuation
        - expression-statement-pop
    - include: expression-end

  support-property-ecma:
    - match: constructor{{identifier_break}}
      scope: variable.language.constructor.js
      pop: 1
    - match: prototype{{identifier_break}}
      scope: support.constant.prototype.js
      pop: 1

    - match: (?:hasOwnProperty|isPrototypeOf|propertyIsEnumerable|toLocaleString|toString|valueOf){{identifier_break}}
      scope: support.function.js
      pop: 1

    # Annex B
    - match: __proto__{{identifier_break}}
      scope: invalid.deprecated.js variable.language.prototype.js
      pop: 1
    - match: (?:__defineGetter__|__defineSetter__|__lookupGetter__){{identifier_break}}
      scope: invalid.deprecated.js support.function.js
      pop: 1

  constructor-body-expect-arguments:
    - include: function-call-arguments
    - include: else-pop

  flow-type-declare:
    - match: declare{{identifier_break}}(?=\s*(?:type|class|function|var|let|const|opaque|export|module){{identifier_break}})
      scope: keyword.declaration.js
      set:
        - match: opaque{{identifier_break}}
          scope: storage.modifier.js
          pop: true
        - match: module{{identifier_break}}
          scope: keyword.declaration.js
          set:
            - flow-type-module-meta
            - flow-type-module-body
            - flow-type-module-name
        - match: export{{identifier_break}}
          scope: keyword.declaration.js
          set: flow-type-declare-export
        - include: else-pop

  for-condition-contents:
    # This could be either type of for loop.
    - match: (?:const|let|var){{identifier_break}}
      scope: keyword.declaration.js
      set:
        -   - include: for-of-rest
            - match: (?=\S)
              set:
                - for-oldstyle-rest
                - variable-binding-list
                - initializer
        - variable-binding-pattern

    - match: (?=\S)
      set:
        -   - include: for-of-rest
            - match: (?=\S)
              set: for-oldstyle-rest
        - expression-end-no-in
        - expression-begin

  literal-double-quoted-string-content:
    - meta_include_prototype: false
    - meta_scope: meta.string.js string.quoted.double.js
    - match: \"
      scope: punctuation.definition.string.end.js
      pop: 1
    - match: \n
      scope: invalid.illegal.newline.js
      pop: 1
    - include: string-content

  string-content:
    - match: \\\n
      scope: constant.character.escape.newline.js
    - match: \\(?:x\h\h|u\h\h\h\h|.)
      scope: constant.character.escape.js

  regexp-complete:
    - match: /
      scope: punctuation.definition.string.begin.js
      set: regexp

  support-property:
    - include: support-property-ecma

  do-while-condition:
    - match: while{{identifier_break}}
      scope: keyword.control.loop.while.js
      set: parenthesized-expression
    - include: else-pop

  comments:
    - include: line-comments
    - include: block-comments

  detect-arrow:
    - match: (?==>)
      fail: arrow-function
    - include: else-pop

  variable-binding-array-destructuring:
    - match: \[
      scope: punctuation.section.sequence.begin.js
      set:
        - meta_scope: meta.binding.destructuring.sequence.js
        - match: \]
          scope: punctuation.section.sequence.end.js
          pop: 1
        - include: variable-binding-spread
        - include: variable-binding-list

  block-meta:
    - meta_include_prototype: false
    - meta_scope: meta.block.js
    - include: immediately-pop

  flow-function-type-arguments-or-less-than:
    - match: (?=<(?![<=]))
      branch_point: flow-function-type-arguments
      branch:
        - flow-function-type-arguments
        - flow-less-than

  support-property-ecma-json:
    - match: (?:parse|stringify){{identifier_break}}
      scope: support.function.builtin.js
      pop: 1

  expect-label:
    - meta_include_prototype: false
    - match: (?={{nothing}}{{identifier_name}})
      set:
        - match: '{{non_reserved_identifier}}'
          scope: variable.label.js
          pop: 1
        - match: '{{identifier_name}}'
          scope: invalid.illegal.identifier.js variable.label.js
          pop: 1
        - include: else-pop
    - include: immediately-pop

  jsx-tag-name-component-possibly-native:
    - match: '[[:lower:]]{{jsx_identifier_part}}*{{jsx_identifier_break}}(?!{{nothing}}[.:])'
      scope: entity.name.tag.native.js
      pop: 1
    - include: jsx-tag-name-component

  for-oldstyle-rest:
    - match: (?=\))
      pop: 1
    - match: ;
      scope: punctuation.separator.expression.js
    - match: (?=\S)
      push: expression

  do-while-meta:
    - meta_include_prototype: false
    - meta_scope: meta.do-while.js
    - include: immediately-pop

  object-literal-property-check:
    - match: (?=\()
      fail: object-literal-property
    - include: else-pop

  class-extends:
    - match: extends{{identifier_break}}
      scope: storage.modifier.extends.js
      set:
        - inherited-class-expression-end
        - inherited-class-expression-begin
    - include: else-pop

  jsdoc-block-tag:
    - match: '{{jsdoc_block_tag}}'
      scope: entity.other.attribute-name.documentation.js
      pop: 1
    - match: (?=\S)|$
      pop: 1

name: JS Custom - React
